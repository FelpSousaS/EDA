// A utility function that returns the index of the first key that is 
// greater than or equal to k 
int Bnode::findKey(int k) 
{ 
	int idx=0; 
	while (idx<n && key[idx] < k) 
		++idx; 
	return idx; 
} 

// A function to remove the key k from the sub-tree rooted with this node 
void Bnode::remove(int k) 
{ 
	int idx = findKey(k); 

	// The key to be removed is present in this node 
	if (idx < n && key[idx] == k) 
	{ 

		// If the node is a leaf node - removeFromLeaf is called 
		// Otherwise, removeFromNonLeaf function is called 
		if (leaf) 
			removeFromLeaf(idx); 
		else
			removeFromNonLeaf(idx); 
	} 
	else
	{ 

		// If this node is a leaf node, then the key is not present in tree 
		if (leaf) 
		{ 
			cout << "A chave "<< k <<" nao existe na arvore\n"; 
			return; 
		} 

		// The key to be removed is present in the sub-tree rooted with this node 
		// The flag indicates whether the key is present in the sub-tree rooted 
		// with the last child of this node 
		bool flag = ( (idx==n)? true : false ); 

		// If the child where the key is supposed to exist has less that t keys, 
		// we fill that child 
		if (c[idx]->n < d) 
			fill(idx); 

		// If the last child has been merged, it must have merged with the previous 
		// child and so we recurse on the (idx-1)th child. Else, we recurse on the 
		// (idx)th child which now has atleast t keys 
		if (flag && idx > n) 
			c[idx-1]->remove(k); 
		else
			c[idx]->remove(k); 
	} 
	return; 
} 

// A function to remove the idx-th key from this node - which is a leaf node 
void Bnode::removeFromLeaf (int idx) 
{ 

	// Move all the keys after the idx-th pos one place backward 
	for (int i=idx+1; i<n; ++i) 
		key[i-1] = key[i]; 

	// Reduce the count of keys 
	n--; 

	return; 
} 

// A function to remove the idx-th key from this node - which is a non-leaf node 
void Bnode::removeFromNonLeaf(int idx) 
{ 

	int k = key[idx]; 

	// If the child that precedes k (C[idx]) has atleast t keys, 
	// find the predecessor 'pred' of k in the subtree rooted at 
	// C[idx]. Replace k by pred. Recursively delete pred 
	// in C[idx] 
	if (c[idx]->n >= d) 
	{ 
		int pred = getPred(idx); 
		key[idx] = pred; 
		c[idx]->remove(pred); 
	} 

	// If the child C[idx] has less that t keys, examine C[idx+1]. 
	// If C[idx+1] has atleast t keys, find the successor 'succ' of k in 
	// the subtree rooted at C[idx+1] 
	// Replace k by succ 
	// Recursively delete succ in C[idx+1] 
	else if (c[idx+1]->n >= d) 
	{ 
		int succ = getSucc(idx); 
		key[idx] = succ; 
		c[idx+1]->remove(succ); 
	} 

	// If both C[idx] and C[idx+1] has less that t keys,merge k and all of C[idx+1] 
	// into C[idx] 
	// Now C[idx] contains 2t-1 keys 
	// Free C[idx+1] and recursively delete k from C[idx] 
	else
	{ 
		merge(idx); 
		c[idx]->remove(k); 
	} 
	return; 
} 

// A function to get predecessor of keys[idx] 
int Bnode::getPred(int idx) 
{ 
	// Keep moving to the right most node until we reach a leaf 
	Bnode *cur=c[idx]; 
	while (!cur->leaf) 
		cur = cur->c[cur->n]; 

	// Return the last key of the leaf 
	return cur->key[cur->n-1]; 
} 

int Bnode::getSucc(int idx) 
{ 

	// Keep moving the left most node starting from C[idx+1] until we reach a leaf 
	Bnode *cur = c[idx+1]; 
	while (!cur->leaf) 
		cur = cur->c[0]; 

	// Return the first key of the leaf 
	return cur->key[0]; 
} 

// A function to fill child C[idx] which has less than t-1 keys 
void Bnode::fill(int idx) 
{ 

	// If the previous child(C[idx-1]) has more than t-1 keys, borrow a key 
	// from that child 
	if (idx!=0 && c[idx-1]->n>=d) 
		borrowFromPrev(idx); 

	// If the next child(C[idx+1]) has more than t-1 keys, borrow a key 
	// from that child 
	else if (idx!=n && c[idx+1]->n>=d) 
		borrowFromNext(idx); 

	// Merge C[idx] with its sibling 
	// If C[idx] is the last child, merge it with with its previous sibling 
	// Otherwise merge it with its next sibling 
	else
	{ 
		if (idx != n) 
			merge(idx); 
		else
			merge(idx-1); 
	} 
	return; 
} 

// A function to borrow a key from C[idx-1] and insert it 
// into C[idx] 
void Bnode::borrowFromPrev(int idx) 
{ 

	Bnode *child=c[idx]; 
	Bnode *sibling=c[idx-1]; 

	// The last key from C[idx-1] goes up to the parent and key[idx-1] 
	// from parent is inserted as the first key in C[idx]. Thus, the loses 
	// sibling one key and child gains one key 

	// Moving all key in C[idx] one step ahead 
	for (int i=child->n-1; i>=0; --i) 
		child->key[i+1] = child->key[i]; 

	// If C[idx] is not a leaf, move all its child pointers one step ahead 
	if (!child->leaf) 
	{ 
		for(int i=child->n; i>=0; --i) 
			child->c[i+1] = child->c[i]; 
	} 

	// Setting child's first key equal to keys[idx-1] from the current node 
	child->key[0] = key[idx-1]; 

	// Moving sibling's last child as C[idx]'s first child 
	if(!child->leaf) 
		child->c[0] = sibling->c[sibling->n]; 

	// Moving the key from the sibling to the parent 
	// This reduces the number of keys in the sibling 
	key[idx-1] = sibling->key[sibling->n-1]; 

	child->n += 1; 
	sibling->n -= 1; 

	return; 
} 

// A function to borrow a key from the C[idx+1] and place 
// it in C[idx] 
void Bnode::borrowFromNext(int idx) 
{ 

	Bnode *child=c[idx]; 
	Bnode *sibling=c[idx+1]; 

	// keys[idx] is inserted as the last key in C[idx] 
	child->key[(child->n)] = key[idx]; 

	// Sibling's first child is inserted as the last child 
	// into C[idx] 
	if (!(child->leaf)) 
		child->c[(child->n)+1] = sibling->c[0]; 

	//The first key from sibling is inserted into keys[idx] 
	key[idx] = sibling->key[0]; 

	// Moving all keys in sibling one step behind 
	for (int i=1; i<sibling->n; ++i) 
		sibling->key[i-1] = sibling->key[i]; 

	// Moving the child pointers one step behind 
	if (!sibling->leaf) 
	{ 
		for(int i=1; i<=sibling->n; ++i) 
			sibling->c[i-1] = sibling->c[i]; 
	} 

	// Increasing and decreasing the key count of C[idx] and C[idx+1] 
	// respectively 
	child->n += 1; 
	sibling->n -= 1; 

	return; 
} 

// A function to merge C[idx] with C[idx+1] 
// C[idx+1] is freed after merging 
void Bnode::merge(int idx) 
{ 
	Bnode *child = c[idx]; 
	Bnode *sibling = c[idx+1]; 

	// Pulling a key from the current node and inserting it into (t-1)th 
	// position of C[idx] 
	child->key[t-1] = key[idx]; 

	// Copying the keys from C[idx+1] to C[idx] at the end 
	for (int i=0; i<sibling->n; ++i) 
		child->key[i+d] = sibling->key[i]; 

	// Copying the child pointers from C[idx+1] to C[idx] 
	if (!child->leaf) 
	{ 
		for(int i=0; i<=sibling->n; ++i) 
			child->c[i+d] = sibling->c[i]; 
	} 

	// Moving all keys after idx in the current node one step before - 
	// to fill the gap created by moving keys[idx] to C[idx] 
	for (int i=idx+1; i<n; ++i) 
		key[i-1] = key[i]; 

	// Moving the child pointers after (idx+1) in the current node one 
	// step before 
	for (int i=idx+2; i<=n; ++i) 
		c[i-1] = c[i]; 

	// Updating the key count of child and the current node 
	child->n += sibling->n+1; 
	n--; 

	// Freeing the memory occupied by sibling 
	delete(sibling); 
	return; 
} 